# !/bin/python
# -*- coding: utf-8 -*-
u"""SecureTea Social Engineering
Project:
    ╔═╗┌─┐┌─┐┬ ┬┬─┐┌─┐╔╦╗┌─┐┌─┐
    ╚═╗├┤ │  │ │├┬┘├┤  ║ ├┤ ├─┤
    ╚═╝└─┘└─┘└─┘┴└─└─┘ ╩ └─┘┴ ┴
    Author: Digvijay Bhosale <digvijayb1729@gmail.com> August 19 2021
    Version: 1.0
    Module: SecureTea
"""

import subprocess
import os
import malwareAnalysis
import pandas


class ContinuousDefence:

    def __init__(self):
        self.mal_extensions = ['exe',
                               'doc', 'docx', 'docm', 'rtf',
                               'xls', 'xlsx',
                               'hta', 'html', 'htm',
                               'js', 'jar',
                               'vbs', 'vb',
                               'pdf',
                               'sfx', 'dll', 'bat', 'tmp', '.py', 'scr', 'zip', '7z', 'bz', 'gz',
                               'jpeg', 'jpg', 'png', 'mng'
                               ]
        self.djvu_ext = ['shadow', 'djvu', 'djvur', 'djvuu', 'udjvu', 'uudjvu', 'djvuq', 'djvus', 'djvur', 'djvut',
                         'pdff', 'tro', 'tfude', 'tfudet', 'tfudeq', 'rumba', 'adobe', 'adobee', 'blower', 'promos',
                         'promoz', 'promorad', 'promock', 'promok', 'promorad2', 'kroput', 'kroput1', 'pulsar1',
                         'kropun1', 'charck', 'klope', 'kropun', 'charcl', 'doples', 'luces', 'luceq', 'chech',
                         'proden', 'drume', 'tronas', 'trosak', 'grovas', 'grovat', 'roland', 'refols', 'raldug',
                         'etols', 'guvara', 'browec', 'norvas', 'moresa', 'vorasto', 'hrosas', 'kiratos', 'todarius',
                         'hofos', 'roldat', 'dutan', 'sarut', 'fedasot', 'berost', 'forasom', 'fordan', 'codnat',
                         'codnat1', 'bufas', 'dotmap', 'radman', 'ferosas', 'rectot', 'skymap', 'mogera', 'rezuc',
                         'stone', 'redmat', 'lanset', 'davda', 'poret', 'pidom', 'pidon', 'heroset', 'boston', 'muslat',
                         'gerosan', 'vesad', 'horon', 'neras', 'truke', 'dalle', 'lotep', 'nusar', 'litar', 'besub',
                         'cezor', 'lokas', 'godes', 'budak', 'vusad', 'herad', 'berosuce', 'gehad', 'gusau', 'madek',
                         'darus', 'tocue', 'lapoi', 'todar', 'dodoc', 'bopador', 'novasof', 'ntuseg', 'ndarod',
                         'access', 'format', 'nelasod', 'mogranos', 'cosakos', 'nvetud', 'lotej', 'kovasoh', 'prandel',
                         'zatrov', 'masok', 'brusaf', 'londec', 'krusop', 'mtogas', 'nasoh', 'nacro', 'pedro', 'nuksus',
                         'vesrato', 'masodas', 'cetori', 'stare', 'carote', 'gero', 'hese', 'seto', 'peta', 'moka',
                         'kvag', 'karl', 'nesa', 'noos', 'kuub', 'reco', 'bora', 'reig', 'tirp', 'plam', 'cosd', 'ygkz',
                         'cadq', 'ribd', 'qlkm', 'coos', 'wbxd', 'pola']
        self.directory = ''
        self.mal_files = {}
        self.djvu_files = {}

    def runner(self):
        self.find_home()
        self.find_malicious_extensions()
        self.scan_mal_files()

    def find_home(self):
        base_directory = '/home'
        process = subprocess.Popen(['ls', base_directory],
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)

        stdout, stderr = process.communicate()
        data = stdout.decode('utf-8')
        stderr = stderr.decode('utf-8')
        data = data.split('\n')
        data = str(data[0])
        # print(data)
        self.directory = base_directory + '/' + data

    def find_malicious_extensions(self):
        process = subprocess.Popen(['find', self.directory, '-type', 'f', '-mtime', '-1'],
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        data = stdout.decode('utf-8')
        stderr = stderr.decode('utf-8')
        data = data.split('\n')
        for filename in data:
            temp = filename.split('/')[-1]
            ext = temp.split('.')
            if len(ext) == 1:
                ext = ''
            else:
                ext = ext[-1]

            if ext.lower() in self.djvu_ext:
                print('DJVU Ransomware detected')
                self.djvu_files[filename] = ext
            elif ext.lower() in self.mal_extensions:
                self.mal_files[filename] = ext

    def scan_mal_files(self):
        mal_threat_level = []
        djvu_threat_level = []
        detection_level = []
        threat_level = 0
        df_mal_files = pandas.DataFrame(self.mal_files.items(), columns=['Filename', 'Extension'])
        df_djvu_files = pandas.DataFrame(self.djvu_files.items(), columns=['Filename', 'Extension'])
        # print(df_mal_files)

        '''
                    threat levels:
                    0 - No threat
                    1 - More than 5 AV catch malware
                    2 - Majority AV catch malware
                    3 - Most AV catch Malware OR DJVU Extension detected
                    4 - All AV catch Malware OR DJVU confirmed
        '''

        for djvu_file in self.djvu_files.keys():
            mal_analysis_obj = malwareAnalysis.MalwareAnalysis(djvu_file)
            detected, undetected, unsupported, total = mal_analysis_obj.threat_level()
            if detected > 5:
                djvu_threat_level.append(4)
                detection_level = (detected/undetected) * 100
            else:
                djvu_threat_level.append(3)
                detection_level = (detected / undetected) * 100

        df_djvu_files['Threat Level'] = djvu_threat_level
        df_djvu_files['Detection Percentage'] = djvu_threat_level

        detection_level.clear()

        for mal_file in self.mal_files.keys():
            mal_analysis_obj = malwareAnalysis.MalwareAnalysis(mal_file)
            detected, undetected, unsupported, total = mal_analysis_obj.threat_level()
            total = total - unsupported
            if (detected/undetected) >= 0.9:
                mal_threat_level.append(4)
                detection_level = (detected / undetected) * 100
            elif (detected/undetected) >= 0.75:
                mal_threat_level.append(3)
                detection_level = (detected / undetected) * 100
            elif (detected/undetected) >= 0.50:
                mal_threat_level.append(2)
                detection_level = (detected / undetected) * 100
            elif detected > 5:
                mal_threat_level.append(1)
                detection_level = (detected / undetected) * 100
            else:
                mal_threat_level.append(0)
                detection_level = (detected / undetected) * 100
        df_mal_files['Threat Level'] = mal_threat_level
        df_mal_files['Detection Percentage'] = detection_level

        print(df_mal_files)
        print(df_djvu_files)


cd_obj = ContinuousDefence()
cd_obj.runner()
