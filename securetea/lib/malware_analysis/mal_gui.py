import time
from securetea.lib.malware_analysis import test
from securetea.lib.malware_analysis import globals
from flask import Flask, render_template
import pandas
import threading
import json

globals.initialize_flask()

app = Flask(__name__)

critical_df = None
alerts_dict = {}


@app.route('/')
def home():
    global critical_df
    global alerts_dict
    while globals.mal_file_dict == {}:
        time.sleep(10)
    mal_file_dict = globals.mal_file_dict
    mal_file_dict = json.loads(str(mal_file_dict).replace('\'', '\"'))
    mal_df = pandas.DataFrame(mal_file_dict).transpose()
    mal_df.columns = ['Detected', 'Undetected', 'Unsupported', 'Total', 'Report ID']
    mal_df_html = mal_df.to_html()

    color = 'white'
    for filename in mal_file_dict.keys():
        if mal_file_dict[filename][0] > 0:
            color = 'red'
            alerts_dict[filename] = mal_file_dict[filename]

    alerts_dict = json.loads(str(alerts_dict).replace('\'', '\"'))
    if alerts_dict != {}:
        alerts_df = pandas.DataFrame(alerts_dict).transpose()
        alerts_df.columns = ['Detected', 'Undetected', 'Unsupported', 'Total', 'Report ID']
        alerts_df_html = alerts_df.to_html()

    # write html to file
    text_file = open("/home/fox/GSOC/OWASP/SecureTea-Dev/securetea/lib/malware_analysis/templates/origin.html", "r+")
    original_html = text_file.read()
    html = original_html
    mal_df_html = 'document.getElementById("mal_df").innerHTML = `' + mal_df_html + '`;'
    if alerts_dict != {}:
        alerts_df_html = 'document.getElementById("alerts_df").innerHTML = `' + alerts_df_html + '`;'
    else:
        alerts_df_html = 'document.getElementById("alerts_df").innerHTML = `No Alert files yet`;'
    ctime = 'Last Completed scan ended at' + globals.ctime + '\n Next scan in'
    ctime = 'document.getElementById("ctime").innerHTML = `' + ctime + '`;'
    html = html.replace('mal_df_js', mal_df_html)
    html = html.replace('alerts_df_js', alerts_df_html)
    html = html.replace('ctime_js', ctime)

    text_file.close()

    text_file = open("/home/fox/GSOC/OWASP/SecureTea-Dev/securetea/lib/malware_analysis/templates/index.html", "w+")
    text_file.write(html)
    text_file.close()
    return render_template('index.html',
                           df_color=color)


def app_runner():
    globals.initialize_flask()
    app.config['TEMPLATES_AUTO_RELOAD'] = True
    app.run(debug=False)
