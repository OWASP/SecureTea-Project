import time
from securetea.lib.malware_analysis import test
from securetea.lib.malware_analysis import globals
from flask import Flask, render_template
import pandas
import threading
import json

globals.initialize_flask()

app = Flask(__name__)

critical_df = None
alerts_dict = {}


@app.route('/')
def home():
    global critical_df
    global alerts_dict
    # df1 = globals.mal_df
    # mal_file_dict = '''{"/home/fox/GSOC/OWASP/SecureTea-Dev/templates/index.html": [9, 58, 15, 73, "MWUyYjgxODA4OTFjYTAyMTU5NjM5OTc0YjJkNmYxYjk6MTYyOTc4ODUwOA=="], "/home/fox/.mozilla/firefox/gw8o17bf.default-release/prefs.js": [10, 56, 16, 73, "MGVhYzk5YjdlMDRhODM4NjRkMmIzOGQ5YmVkOTlkNDU6MTYyOTc4ODQ5Mw=="], "/home/fox/.cache/thumbnails/large/6db1866c31272221d4fa4f9564d9f804.png": [0, 57, 16, 73, "ODBiOWQyYzY1YzI2MDlmMDBiMDkxZDYyZDEyYjhkOGI6MTYyOTc4ODQ4MA=="], "/home/fox/GSOC/OWASP/SecureTea-Dev/templates/origin.html": [0, 56, 13, 72, "ZGM5YzM3YzUzYzliZGU1MTZlYjkwYTUwMTZkNWFmNDk6MTYyOTc4ODUyNA=="]}'''
    # print('globals.mal_file_dict OUTSIDE WHILE\t' + str(globals.mal_file_dict))
    while globals.mal_file_dict == {}:
        print("INSIDE GUI.")
        print('globals.mal_file_dict\t' + str(globals.mal_file_dict))
        time.sleep(10)
    mal_file_dict = globals.mal_file_dict
    mal_file_dict = json.loads(str(mal_file_dict).replace('\'', '\"'))
    mal_df = pandas.DataFrame(mal_file_dict).transpose()
    mal_df.columns = ['Detected', 'Undetected', 'Unsupported', 'Total', 'Report ID']
    # print("MAL DF")
    # print("MAL DF")
    # print("MAL DF")
    # print(mal_df.to_string())
    mal_df_html = mal_df.to_html()

    color = 'white'
    for filename in mal_file_dict.keys():
        if mal_file_dict[filename][0] > 0:
            color = 'red'
            alerts_dict[filename] = mal_file_dict[filename]

    alerts_dict = json.loads(str(alerts_dict).replace('\'', '\"'))
    if alerts_dict != {}:
        alerts_df = pandas.DataFrame(alerts_dict).transpose()
        alerts_df.columns = ['Detected', 'Undetected', 'Unsupported', 'Total', 'Report ID']
        alerts_df_html = alerts_df.to_html()

    print(alerts_df.to_string())

    # write html to file
    text_file = open("/home/fox/GSOC/OWASP/SecureTea-Dev/securetea/lib/malware_analysis/templates/origin.html", "r+")
    original_html = text_file.read()
    html = original_html
    mal_df_html = 'document.getElementById("mal_df").innerHTML = `' + mal_df_html + '`;'
    if alerts_dict != {}:
        alerts_df_html = 'document.getElementById("alerts_df").innerHTML = `' + alerts_df_html + '`;'
    else:
        alerts_df_html = 'document.getElementById("alerts_df").innerHTML = `No Alert files yet`;'
    ctime = 'Last Completed scan ended at' + globals.ctime + '\n Next scan in'
    ctime = 'document.getElementById("ctime").innerHTML = `' + ctime + '`;'
    html = html.replace('mal_df_js', mal_df_html)
    html = html.replace('alerts_df_js', alerts_df_html)
    html = html.replace('ctime_js', ctime)
    # print('THIS IS HTMLLLL')
    # print('THIS IS HTMLLLL')
    # print('THIS IS HTMLLLL')
    # print(html)
    text_file.close()

    text_file = open("/home/fox/GSOC/OWASP/SecureTea-Dev/securetea/lib/malware_analysis/templates/index.html", "w+")
    text_file.write(html)
    text_file.close()
    print("ALERTS DF")
    print("ALERTS DF")
    print("ALERTS DF")
    print(alerts_df.to_string())
    return render_template('index.html',
                           df_color=color)


'''
class MalGUI(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run(self):
        app.run(debug=True)
'''


def app_runner():
    globals.initialize_flask()
    app.config['TEMPLATES_AUTO_RELOAD'] = True
    app.run(debug=False)


def index_mod():
    text_file = open("/home/fox/GSOC/OWASP/SecureTea-Dev/securetea/lib/malware_analysis/templates/index.html", "r+")
    original_html = text_file.read()
    print(original_html)
    text_file = open("/home/fox/GSOC/OWASP/SecureTea-Dev/securetea/lib/malware_analysis/templates/index.html", "w+")
    text_file.write('Suphia san date? ')
    text_file.close()
