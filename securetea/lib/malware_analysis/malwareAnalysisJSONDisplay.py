# !/bin/python
# -*- coding: utf-8 -*-
u"""SecureTea Social Engineering
Project:
    ╔═╗┌─┐┌─┐┬ ┬┬─┐┌─┐╔╦╗┌─┐┌─┐
    ╚═╗├┤ │  │ │├┬┘├┤  ║ ├┤ ├─┤
    ╚═╝└─┘└─┘└─┘┴└─└─┘ ╩ └─┘┴ ┴
    Author: Digvijay Bhosale <digvijayb1729@gmail.com> August 16 2021
    Version: 1.0
    Module: SecureTea
"""

import json
import pandas


class JSONDisplay:
    '''
    Contains functions that analyse JSON responses from VirusTotal API and displays formatted results
    
    verbosity_1()
    Displays how many Antivirus engines detected malware in selected file
    
    verbosity_2()
    Displays Antiviruses along with their detection statuses in a formatted manner
    
    verbosity_3()
    Displays Antiviruses along with their detection statuses, method and result in a formatted manner
    
    verbosity_4()
    Display all information about scan in a table format. Uses pandas to create dataframe from JSON and then display it out on screen
    '''
    def __init__(self):
        pass

    def verbosity_1(self, av_engines, av_engines_list):
        undetected = 0
        detected = 0
        unsupported = 0
        total = 0
        for av_engine in av_engines:
            print(av_engines_list[av_engine]['category'])
            if av_engines_list[av_engine]['category'] == 'undetected':
                undetected = undetected + 1
                total = total + 1
            elif av_engines_list[av_engine]['category'] == 'detected':
                detected = detected + 1
                total = total + 1
            elif av_engines_list[av_engine]['category'] == 'type-unsupported':
                unsupported = unsupported + 1
                total = total + 1
            else:
                total = total + 1

        print('Detected : ' + str(detected) + '/' + str(total))
        print('Undetected : ' + str(undetected) + '/' + str(total))
        print('Type unsupported : ' + str(unsupported) + '/' + str(total))
        return detected, undetected, unsupported, total


    def verbosity_2(self, av_engines, av_engines_list):
        print('DETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'detected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tDetected')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tDetected')
                else:
                    print(str(av_engine) + '\t\t\tDetected')
        print('-----------------------------------------------')
        print('UNDETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'undetected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tUndetected')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tUndetected')
                else:
                    print(str(av_engine) + '\t\t\tUndetected')
        print('-----------------------------------------------')
        print('TYPE UNSUPPORTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'type-unsupported':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\ttype-unsupported')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\ttype-unsupported')
                else:
                    print(str(av_engine) + '\t\t\ttype-unsupported')
        print('-----------------------------------------------')

    def verbosity_3(self, av_engines, av_engines_list):
        print('DETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'detected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tDetected', end='')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tDetected', end='')
                else:
                    print(str(av_engine) + '\t\t\tDetected', end='')
                print('\tMethod : ' + str(av_engines_list[av_engine]['method']) +
                      '\tResult : ' + str(av_engines_list[av_engine]['result']))
        print('-----------------------------------------------')
        print('UNDETECTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'undetected':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\tUndetected', end='')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\tUndetected', end='')
                else:
                    print(str(av_engine) + '\t\t\tUndetected', end='')
                print('\tMethod : ' + str(av_engines_list[av_engine]['method']) +
                      '\tResult : ' + str(av_engines_list[av_engine]['result']))
        print('-----------------------------------------------')
        print('TYPE UNSUPPORTED')
        for av_engine in av_engines:
            if av_engines_list[av_engine]['category'] == 'type-unsupported':
                if len(av_engine) >= 16:
                    print(str(av_engine) + '\ttype-unsupported', end='')
                elif len(av_engine) >= 8:
                    print(str(av_engine) + '\t\ttype-unsupported', end='')
                else:
                    print(str(av_engine) + '\t\t\ttype-unsupported', end='')
                print('\tMethod : ' + str(av_engines_list[av_engine]['method']) +
                      '\tResult : ' + str(av_engines_list[av_engine]['result']))
        print('-----------------------------------------------')

    def verbosity_4(self, av_engines, av_engines_list):
        df1 = pandas.DataFrame(av_engines_list)
        df1 = df1.transpose()
        print(df1.to_string())
